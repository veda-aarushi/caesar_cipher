{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","text","setText","useState","shift","setShift","result","setResult","steps","setSteps","React","createElement","className","placeholder","value","onChange","e","target","type","Number","onClick","async","res","axios","post","data","map","step","idx","key","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"kPA6EeA,MA1Ef,WACE,MAAOC,EAAMC,GAAWC,mBAAS,KAC1BC,EAAOC,GAAYF,mBAAS,IAC5BG,EAAQC,GAAaJ,mBAAS,KAC9BK,EAAOC,GAAYN,mBAAS,IAcnC,OACEO,IAAAC,cAAA,OAAKC,UAAU,kEACbF,IAAAC,cAAA,OAAKC,UAAU,+DACbF,IAAAC,cAAA,MAAIC,UAAU,gDAA+C,yCAI7DF,IAAAC,cAAA,OAAKC,UAAU,mCACbF,IAAAC,cAAA,SACEC,UAAU,4BACVC,YAAY,gBACZC,MAAOb,EACPc,SAAWC,GAAMd,EAAQc,EAAEC,OAAOH,SAEpCJ,IAAAC,cAAA,SACEO,KAAK,SACLN,UAAU,0BACVC,YAAY,QACZC,MAAOV,EACPW,SAAWC,GAAMX,EAASc,OAAOH,EAAEC,OAAOH,WAI9CJ,IAAAC,cAAA,OAAKC,UAAU,6BACbF,IAAAC,cAAA,UACES,QArCYC,UACpB,MAAMC,QAAYC,IAAMC,KAAK,gCAAiC,CAAEvB,OAAMG,UACtEG,EAAUe,EAAIG,KAAKnB,QACnBG,EAASa,EAAIG,KAAKjB,QAmCVI,UAAU,8DACX,WAGDF,IAAAC,cAAA,UACES,QArCYC,UACpB,MAAMC,QAAYC,IAAMC,KAAK,gCAAiC,CAAEvB,OAAMG,UACtEG,EAAUe,EAAIG,KAAKnB,QACnBG,EAASa,EAAIG,KAAKjB,QAmCVI,UAAU,gEACX,YAKFN,GACCI,IAAAC,cAAA,OAAKC,UAAU,sCACbF,IAAAC,cAAA,MAAIC,UAAU,uCAAsC,WACpDF,IAAAC,cAAA,KAAGC,UAAU,8BAA8BN,GAE3CI,IAAAC,cAAA,MAAIC,UAAU,6BAA4B,UAC1CF,IAAAC,cAAA,MAAIC,UAAU,uCACXJ,EAAMkB,IAAI,CAACC,EAAMC,IAChBlB,IAAAC,cAAA,MAAIkB,IAAKD,GAAMD,SCvDhBG,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCADS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlC,IAAAC,cAACD,IAAMmC,WAAU,KACfnC,IAAAC,cAACX,EAAG,QAOR8B,M","file":"static/js/main.c920c8b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [text, setText] = useState('');\n  const [shift, setShift] = useState(3);\n  const [result, setResult] = useState('');\n  const [steps, setSteps] = useState([]);\n\n  const handleEncrypt = async () => {\n    const res = await axios.post('http://localhost:5000/encrypt', { text, shift });\n    setResult(res.data.result);\n    setSteps(res.data.steps);\n  };\n\n  const handleDecrypt = async () => {\n    const res = await axios.post('http://localhost:5000/decrypt', { text, shift });\n    setResult(res.data.result);\n    setSteps(res.data.steps);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center px-4\">\n      <div className=\"bg-white p-8 rounded-lg shadow-md w-full max-w-xl space-y-6\">\n        <h1 className=\"text-2xl font-bold text-center text-gray-800\">\n          Caesar Cipher Encryption & Decryption\n        </h1>\n\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <input\n            className=\"border p-2 rounded flex-1\"\n            placeholder=\"Enter text...\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n          />\n          <input\n            type=\"number\"\n            className=\"border p-2 rounded w-24\"\n            placeholder=\"Shift\"\n            value={shift}\n            onChange={(e) => setShift(Number(e.target.value))}\n          />\n        </div>\n\n        <div className=\"flex justify-center gap-4\">\n          <button\n            onClick={handleEncrypt}\n            className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n          >\n            Encrypt\n          </button>\n          <button\n            onClick={handleDecrypt}\n            className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\"\n          >\n            Decrypt\n          </button>\n        </div>\n\n        {result && (\n          <div className=\"bg-gray-50 p-4 rounded border mt-4\">\n            <h2 className=\"text-lg font-semibold text-gray-800\">Result:</h2>\n            <p className=\"text-md mb-2 text-gray-700\">{result}</p>\n\n            <h3 className=\"font-medium text-gray-800\">Steps:</h3>\n            <ul className=\"list-disc list-inside text-gray-700\">\n              {steps.map((step, idx) => (\n                <li key={idx}>{step}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}